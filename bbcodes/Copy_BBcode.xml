<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<!-- MuClient version 4.94 -->

<!-- Plugin "Copy_BBCode" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Copy_BBCode"
   author="Taunya"
   id="56d2afae8c02325fcc5c191a"
   language="Lua"
   purpose="Copys output with BBcode"
   date_written="2018-05-19 10:08:09"
   requires="4.00"
   version="1.0"
   >
<description trim="y">
Copies text from the output window to the clipboard, with BBcode codes.
Based on TI Colour Copy by Nick Gammon.

To use: highlight text and then:

Ctrl+B copy (like Ctrl+C but different)

or: Ctrl + Left-click and select "Copy BBCode"

</description>

</plugin>

<aliases>
  <alias
    match="Copy_BBCode:56d2afae8c02325fcc5c191a"
    enabled="y"
    omit_from_output="y"
    sequence="100"
    script="CopyScript"
    name="Copy_BBCode"
    menu="y"
  >
  </alias>
</aliases>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Script  -->


<script>
<![CDATA[
-- Thank you, Shaun Biggs, for taking your time to write the CopyScript
-- (formerly Copy2) function below. It was slightly altered by me to suit
-- my usage (wordwrapped lines and no \r\n at start of selection).


local BLACK = 1
local RED = 2
local GREEN = 3  
local YELLOW = 4 
local BLUE = 5 
local MAGENTA = 6 
local CYAN = 7 
local WHITE = 8

-- how each colour is to appear (black is not supported on Aardwolf)

local conversion = {
  [GetNormalColour (RED)]     = ANSI (0, 31),
  [GetNormalColour (GREEN)]   = ANSI (0, 32),
  [GetNormalColour (YELLOW)]  = ANSI (0, 33),
  [GetNormalColour (BLUE)]    = ANSI (0, 34),
  [GetNormalColour (MAGENTA)] = ANSI (0, 35),
  [GetNormalColour (CYAN)]    = ANSI (0, 36),
  [GetNormalColour (WHITE)]   = ANSI (0, 37),
  [GetNormalColour (BLACK)]   = ANSI (1, 30),
  [GetBoldColour   (RED)]     = ANSI (1, 31),
  [GetBoldColour   (GREEN)]   = ANSI (1, 32),
  [GetBoldColour   (YELLOW)]  = ANSI (1, 33),
  [GetBoldColour   (BLUE)]    = ANSI (1, 34),
  [GetBoldColour   (MAGENTA)] = ANSI (1, 35),
  [GetBoldColour   (CYAN)]    = ANSI (1, 36),
  [GetBoldColour   (WHITE)]   = ANSI (1, 37),
  [GetBoldColour   (BLACK)]   = ANSI (1, 30),
  }  -- end conversion table
  
function getbbcode ()

  f = assert (io.open ("bbcode.txt", "r"))
  local bbcode = f:read ("*all")
  SetClipboard (bbcode)
  f:close ()

end -- getbbcode

function DoOneLine (styles, startcol, endcol)

  -- remove unneeded style runs at the start
  while next (styles) and startcol > styles [1].length do
    startcol = startcol - styles [1].length
    endcol = endcol - styles [1].length
    table.remove (styles, 1)
  end -- do
  
  -- nothing left? uh oh
  if not next (styles) then return end
  
  -- discard unwanted part of first good style
  if startcol > 1 then
    styles [1].length = styles [1].length - startcol
    endcol = endcol - startcol + 1
    styles [1].text =  styles [1].text:sub (startcol)   
    startcol = 1
  end -- if
  
  -- copy appropriate styles and codes into the output
  while next (styles) do
    local len = endcol - startcol + 1
    
    if len < 0 or endcol < 1 then
      return
    end -- done
    
    -- last style?
    if len < styles [1].length then
      styles [1].length = len
      styles [1].text = styles [1].text:sub (1, len)
    end -- if last style
  
    -- fixup string first - change { to {{ and ~ to {-
    local text = string.gsub (styles [1].text, "{", "{{")
    text = string.gsub (styles [1].text, "~", "{-")
    
    -- put code in front, if we can find one
    local code = conversion [styles [1].textcolour]
    if code then
      copystring = copystring .. code
    end -- if code found
    
    -- now the text
    copystring = copystring .. text
    
    -- less to go now
    endcol = endcol - styles [1].length
    
    -- done this style
    table.remove (styles, 1)
    
  end -- while
  
end -- DoOneLine

function CopyScript(name, line, wildcs)

  -- find selection in output window, if any
  local first_line, last_line = GetSelectionStartLine(), 
                                math.min (GetSelectionEndLine(), GetLinesInBufferCount ())

  local first_column, last_column = GetSelectionStartColumn(), GetSelectionEndColumn()
  
  -- nothing selected, do normal copy
  if first_line <= 0 then
    DoCommand("copy")
    return
  end -- if nothing to copy from output window
  
  copystring = ""
  
  -- iterate to build up copy text
  for line = first_line, last_line do
  
    if line < last_line then
      DoOneLine (GetStyleInfo(line), first_column, GetLineInfo(line).length) 
      first_column = 1
      
      -- Is this a new line or merely the continuation of a paragraph?
      if GetLineInfo (line, 3) then
        copystring = copystring .. "\r\n"
      end  -- new line
      
    else
      DoOneLine (GetStyleInfo(line), first_column, last_column)
    end -- if
        
  end  -- for loop
  
  -- Get rid of a spurious extra new line at the start.
  if copystring:sub (1, 2) == "\r\n" then
    copystring = copystring:sub (3)
  end   -- if newline at start

  if copystring:sub (-2) ~= ANSI (0, 37) then
    copystring = copystring .. ANSI (0, 37)
  end   -- if newline at start

  
  -- finally can set clipboard contents
  -- SetClipboard(copystring)
  f = assert (io.open ("ansi.txt", "w"))  -- open file to export code
  f:write (copystring)  -- write to file
  f:close ()  -- close it

  os.execute('ansifilter\\ansifilter.exe -B -m colormap.txt -i ansi.txt -o bbcode.txt') -- run ansifilter to convert ANSI to BBcode
  
  DoAfterSpecial (2, 'getbbcode()', sendto.script)
  
end -- function CopyScript


AcceleratorTo ("Ctrl+B", "CallPlugin ('56d2afae8c02325fcc5c191a', 'CopyScript', '')", sendto.script)

]]>
</script>


</muclient>
