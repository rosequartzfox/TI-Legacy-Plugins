<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, January 07, 2018, 3:21 PM -->
<!-- MuClient version 4.94 -->

<!-- Plugin "Emote_Preview0_2" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Emote_Preview0_2"
   author="Last Good Dragon"
   id="48b027306b00935f1f183a71"
   language="Lua"
   purpose="Preview an Emote Before Sending It"
   date_written="2018-01-07 15:18:34"
   requires="4.94"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Aliases  -->

<aliases>
  <alias
   match="emote *"
   enabled="y"
   group="Emote Preview"
   send_to="12"
   sequence="100"
  >
  <send>EPCreateWindow()
EPFormatEmote("emote", "%1")</send>
  </alias>
  <alias
   match="rpecho *"
   enabled="y"
   group="Emote Preview"
   send_to="12"
   sequence="100"
  >
  <send>EPCreateWindow()
EPFormatEmote("rpecho", "%1")</send>
  </alias>
</aliases>

<!--  Script  -->


<script>
<![CDATA[
appendtext = ""
EPEmote = ""
CurrentColor = ColourNameToRGB("gray")
IsSpeach = false
wwidth = 800
wheight = 425

function EPCreateWindow()

   CurrentColor = ColourNameToRGB("gray")
   win = "EmotePreview"
   WindowCreate (win, 2, 2, wwidth, wheight, 12, 0, ColourNameToRGB("black"))
   WindowShow (win, true)
   WindowRectOp (win, miniwin.rect_fill, 0, 0, 0, 0, ColourNameToRGB("black"))
   WindowRectOp (win, miniwin.rect_frame, 0, 0, 0, 0, ColourNameToRGB("white"))
   lpoint = WindowInfo(win, 10)
   bpoint = WindowInfo(win, 13)
   WindowRectOp (win, 2, 1, wheight-50, wwidth/2, wheight-1, ColourNameToRGB("Green"))
   WindowRectOp (win, 2, wwidth/2, wheight-50, wwidth-1, wheight-1, ColourNameToRGB("Red"))
   WindowRectOp (win, 1, 0, 0, 800, 376, ColourNameToRGB("white"))
   WindowRectOp (win, 2, 0, 0, 800, 25, ColourNameToRGB("gray"))

   WindowAddHotspot(win, "submit", 1, wheight-50, wwidth/2, wheight-1, "", "", "", "", "EPSubmit", "Submit Emote As Is", miniwin.cursor_plus, 0)
   WindowAddHotspot(win, "cancel", wwidth/2, wheight-50, wwidth-1, wheight-1, "", "", "", "", "EPCancel", "Cancel And Return To Editing", miniwin.cursor_plus, 0)

   WindowFont (win, "title-font", "Courier", 10, true, false, true, false)
   WindowText (win, "title-font", "Farra's Emote Preview v0.2 - Line Breaks! Colors! Stats! Oh My!", 1, 1, 800, 25, ColourNameToRGB("Pink"), 0)
   WindowFont (win, "hotspot-font", "Courier", 28, true, false, true, false) -- define font
   WindowText (win, "hotspot-font", "SUBMIT", 150, 385, 350, 415, ColourNameToRGB("red"), 0) 
   WindowText (win, "hotspot-font", "CANCEL", 550, 385, 750, 415, ColourNameToRGB("green"), 0)

   WindowFont (win, "output-font", "Courier", 5, false, false, false, false) -- define font
   appendtext = "NULL"

end -- CreateWindow

function EPHideWindow()
   win = "EmotePreview"
   WindowShow(win, false)
   WindowDelete(win)
end -- EPHideWindow()

function EPFormatEmote(etype, emote)

   EPEmote = etype .. " " .. emote
   text = emote
   height = 26
   IsSpeach = false

   -- Check for Skill / Stat Checks
   if (string.find(text, "-") ~= nil) and (string.find(text, "-") == 1 ) then
      if string.find(text, "-") == 1 then
         loc = string.find(text, " ")
         if ( loc ~= nil ) then
            appendtext = "  A " .. string.sub(text, 2, loc-1) .. " skill check will be made."
            text = string.sub(text, loc+1)
         end
      end
   else 
      if (string.find(text, "+") ~= nil) and (string.find(text, "+") == 1 ) then
         if string.find(text, "+") == 1 then
            loc = string.find(text, " ")
            if ( loc ~= nil ) then
               appendtext = "  A " .. string.sub(text, 2, loc-1) .. " stat check will be made."
               text = string.sub(text, loc+1)
            end
         end
      end
   end

   while EPShouldParse(text) do
      text = EPFormatLine(text, height, 1)
      height = height + 13
   end -- for
   EPFormatLine(text, height, 1)
   height = height + 13
   WindowText (win, "output-font", text, 1, height, 799, height+13, CurrentColor, 0)
   

   if (appendtext ~= "NULL") then
      if (etype ~= "emote") then
         WindowText (win, "output-font", "Error: You Are Attempting A Stat/Skill Check Without Using Emote.", 1, height, 799, height+13, ColourNameToRGB("red"), 0)
      else
         WindowText (win, "output-font", appendtext, 1, height, 799, height+13, ColourNameToRGB("teal"), 0)
      end
      height = height + 13
   end

   -- type checks, ie used /self for emote, etc.
   if (etype == "emote") and (string.find(EPEmote, "/self") == nil) then
      height = height + 13
      WindowText (win, "output-font", "Error: using emote without /self detected. Consider using RPEcho.", 1, height, 799, height+13, ColourNameToRGB("red"), 0)
      height = height + 13
   end
   if (etype == "rpecho") and (string.find(EPEmote, "/self") ~= nil) then
      height = height + 13
      WindowText (win, "output-font", "Error: using rpecho with /self detected. Consider using Emote.", 1, height, 799, height+13, ColourNameToRGB("red"), 0)
      height = height + 13
   end
   return 0
end -- EPFormatEmote

function EPShouldParse(text)

   str = text
   if (string.len(str) > 100) then
      return true
   end
   if ( string.find(str, "{/") ~= nil ) then
      return true
   end

   return false
end

function EPFormatLine(line, height, left)

   text = line

   if (string.len(text) > 100) then
      hardstop = string.sub(text, 0, 100)
      loc = string.find(hardstop, " ")
      nloc = string.find(hardstop, " ", tonumber(loc)+1)
      while ( nloc ~= nil ) do
         loc = nloc
         nloc = string.find(hardstop, " ", tonumber(loc)+1)
      end -- While
      if ( loc == nil ) then
         loc = string.len(text)
      end
   else
      loc = string.len(text)
   end
   newtext = string.sub(text, 0, loc) -- We have what we are going to display

   -- Line Break Parsing
   if ( string.find(newtext, "{/") ~= nil ) then
      loc = string.find(newtext, "{/")
      newtext = string.sub(text, 0, loc-1)
      text = string.sub(text, loc+2)
   else
      text = string.sub(text, loc+1)
   end -- Line Break Parsing

   -- Get Rid of Other {codes
   if ( string.find(newtext, "{") ~= nil ) then
      loc = string.find(newtext, "{")
      aftertext = string.sub (newtext, loc+2)
      newtext = string.sub(newtext, 0, loc-1)
      newtext = newtext .. aftertext
   end


   -- Format Speach Coloring
   while ( string.find(newtext, '"') ~= nil ) do
      loc = string.find(newtext, '"')
      nloc = EPGetTargetLoc(newtext)
      while (nloc ~= nil) and (nloc < loc) and (not IsSpeach) do
         xloc = string.find(newtext, " ", nloc)
         if (nloc == nil) then
            xloc = string.len(newtext)
         end
         beforetext = string.sub (newtext, 0, nloc-1)
         targettext = string.sub (newtext, nloc, xloc)
         newtext = string.sub (newtext, xloc+1)
         left = left + WindowText (win, "output-font", beforetext, left, height, 799, height + 13, CurrentColor, 0)
         CurrentColor = ColourNameToRGB("orange")
         left = left + WindowText (win, "output-font", targettext, left, height, 799, height + 13, CurrentColor, 0)
         CurrentColor = ColourNameToRGB("gray")
         loc = string.find(newtext, '"')
         nloc = EPGetTargetLoc(newtext)
      end
      if ( IsSpeach ) then
         speachtext = string.sub (newtext, 0, loc)
         newtext = string.sub(newtext, loc+1)
         left = left + WindowText (win, "output-font", speachtext, left, height, 799, height + 13, CurrentColor, 0)
         CurrentColor = ColourNameToRGB("gray")
         IsSpeach = false
      else
         speachtext = string.sub (newtext, 0, loc-1)
         newtext = string.sub (newtext, loc+1)
         left = left + WindowText (win, "output-font", speachtext, left, height, 799, height + 13, CurrentColor, 0)
         CurrentColor = ColourNameToRGB("white")
         left = left + WindowText (win, "output-font", '"', left, height, 799, height + 13, CurrentColor, 0)
         IsSpeach = true
      end
   end
   nloc = EPGetTargetLoc(newtext)
   while (nloc ~= nil) and (not IsSpeach) do
      xloc = string.find(newtext, " ", nloc)
      if (nloc == nil) then
         xloc = string.len(newtext)
      end
      beforetext = string.sub (newtext, 0, nloc-1)
      targettext = string.sub (newtext, nloc, xloc)
      newtext = string.sub (newtext, xloc+1)
      left = left + WindowText (win, "output-font", beforetext, left, height, 799, height + 13, CurrentColor, 0)
      CurrentColor = ColourNameToRGB("orange")
      left = left + WindowText (win, "output-font", targettext, left, height, 799, height + 13, CurrentColor, 0)
      CurrentColor = ColourNameToRGB("gray")
      nloc = EPGetTargetLoc(newtext)
   end
   WindowText (win, "output-font", newtext, left, height, 799, height + 13, CurrentColor, 0)
   return text
   
end -- EPFormatLine

function EPGetTargetLoc (text)

   pLoc = EPGetTargetLocAid(text, "/")
   iLoc = EPGetTargetLocAid(text, "#")
   cLoc = EPGetTargetLocAid(text, "*")
   dLoc = EPGetTargetLocAid(text, "|")

   if (pLoc < iLoc) and (pLoc < cLoc) and (pLoc < dLoc) then
      return pLoc
   end
   if (iLoc < pLoc) and (iLoc < cLoc) and (iLoc < dLoc) then
      return iLoc
   end
   if (cLoc < pLoc) and (cLoc < iLoc) and (cLoc < dLoc) then
      return cLoc
   end
   if (dLoc < pLoc) and (dLoc < iLoc) and (dLoc < cLoc) then
      return dLoc
   end
   
   return nil

end -- EPGetRargetLoc

function EPGetTargetLocAid (text, str)

   vloc = string.find(text, str)
   if (vloc == nil) then
      vloc = string.len(text)
   end
   return vloc

end -- EPGetTargetLocAid
   
function EPSubmit (flags, hotspot_id)
   EPHideWindow()
   Send( EPEmote )
   EPEmote = ""
   return 0 -- needed for some languages
end -- EPSubmit

function EPCancel (flags, hotspot_id)
   EPHideWindow()
   return 0
end -- EPCancel


Note ("Last Good Dragon's Emote Preview Script Routine Loaded.")
Note ("Remember to RP Responsibily. For bug reports talk to Farra.")


]]>
</script>


</muclient>